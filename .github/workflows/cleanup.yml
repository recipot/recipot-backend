name: EC2 Disk Cleanup
 
on:
  schedule:
    - cron: '0 1 * * *' # 매일 01:00 (UTC, 한국시간 10:00)
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cleanup disk on EC2
        id: disk_cleanup
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > private_key.pem
          chmod 600 private_key.pem

          # EC2에서 청소 및 정보 수집, 결과를 로컬로 복사
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash -s' << 'ENDSSH'
            KST_TIME=$(TZ=Asia/Seoul date "+%Y-%m-%d %H:%M:%S")
            BEFORE=$(df -h / | tail -1)
            BEFORE_USAGE=$(df --output=pcent / | tail -1 | tr -dc '0-9')
            echo "KST_TIME=$KST_TIME" > /tmp/cleanup_status.txt
            echo "BEFORE=$BEFORE" >> /tmp/cleanup_status.txt
            if [ "$BEFORE_USAGE" -le 30 ]; then
              echo "CLEANED=0" >> /tmp/cleanup_status.txt
              echo "AFTER=$BEFORE" >> /tmp/cleanup_status.txt
              exit 0
            fi

            echo "=== Docker system prune ==="
            docker system prune -af

            echo "=== Docker volume prune ==="
            docker volume prune -f

            echo "=== Remove dangling images ==="
            docker image prune -af

            echo "=== Remove exited containers ==="
            docker container prune -f

            echo "=== Clean apt cache ==="
            sudo apt-get clean

            AFTER=$(df -h / | tail -1)
            echo "CLEANED=1" >> /tmp/cleanup_status.txt
            echo "AFTER=$AFTER" >> /tmp/cleanup_status.txt
          ENDSSH

          scp -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/cleanup_status.txt cleanup_status.txt

          KST_TIME=$(grep KST_TIME cleanup_status.txt | cut -d= -f2-)
          BEFORE=$(grep BEFORE cleanup_status.txt | cut -d= -f2-)
          AFTER=$(grep AFTER cleanup_status.txt | cut -d= -f2- | tail -1)
          CLEANED=$(grep CLEANED cleanup_status.txt | cut -d= -f2)

          {
            echo "## EC2 Disk Cleanup Summary"
            echo ""
            echo "**작업 실행 시간 (KST):** $KST_TIME"
            echo ""
            echo "**청소 전 디스크 상태:**"
            echo "\`\`\`"
            echo "$BEFORE"
            echo "\`\`\`"
            if [ "$CLEANED" = "1" ]; then
              echo ""
              echo "**청소 후 디스크 상태:**"
              echo "\`\`\`"
              echo "$AFTER"
              echo "\`\`\`"
              echo ""
              echo ":white_check_mark: 디스크 청소가 실행되었습니다."
            else
              echo ""
              echo ":information_source: 디스크 사용량이 30% 이하라서 청소를 수행하지 않았습니다."
            fi
          } >> $GITHUB_STEP_SUMMARY
